// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  privyUserId String   @unique
  stravaId    String?
  stravaAccessToken String?
  stravaRefreshToken String?
  stravaTokenExpiresAt DateTime?
  status      String   @default("pending") // active, pending
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  wallets     Wallet[]
  fundraises  Fundraise[]
  pledges     Pledge[]
  activities  Activity[]

  @@map("users")
}

model Wallet {
  id       String   @id @default(uuid())
  userId   String
  address  String
  provider String   // Privy or manual
  status   String   @default("active") // active, inactive
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@map("wallets")
}

model Fundraise {
  id          String   @id @default(uuid())
  userId      String
  title       String
  description String?
  targetAmount Decimal  @db.Decimal(10, 2)
  deadline    DateTime
  status      String   @default("active") // active, completed, expired
  shareableLink String  @unique // Generated unique link for sharing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pledges Pledge[]

  @@map("fundraises")
}

model Pledge {
  id                String   @id @default(uuid())
  fundraiseId       String
  stakerUserId      String?
  stakerWalletAddress String? // For anonymous pledges
  stakerEmail       String?   // For anonymous pledges
  perKmRate         Decimal  @db.Decimal(10, 2)
  totalAmountPledged Decimal  @db.Decimal(10, 2)
  amountRemaining   Decimal  @db.Decimal(10, 2)
  amountPaidOut     Decimal  @db.Decimal(10, 2) @default(0)
  escrowTxHash      String?  // Transaction hash from escrow wallet
  escrowConfirmed   Boolean  @default(false)
  status            String   @default("pending") // pending, active, completed, expired
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  fundraise Fundraise @relation(fields: [fundraiseId], references: [id], onDelete: Cascade)
  staker    User?     @relation(fields: [stakerUserId], references: [id], onDelete: SetNull)
  payouts   Payout[]
  escrowTransactions EscrowTransaction[]

  @@map("pledges")
}

model Activity {
  id                  String   @id @default(uuid())
  fundraiserUserId    String
  distance            Decimal  @db.Decimal(10, 2) // in kilometers
  source              String   // e.g., Strava
  externalActivityId  String
  activityDate        DateTime
  createdAt           DateTime @default(now())

  // Relations
  fundraiser User @relation(fields: [fundraiserUserId], references: [id], onDelete: Cascade)
  payouts    Payout[]

  @@map("activities")
}

model Payout {
  id        String   @id @default(uuid())
  pledgeId  String
  activityId String
  amount    Decimal  @db.Decimal(10, 2)
  status    String   @default("pending") // pending, completed, failed
  txHash    String?  // Transaction hash from escrow to user wallet
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pledge   Pledge   @relation(fields: [pledgeId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@map("payouts")
}

model EscrowTransaction {
  id        String   @id @default(uuid())
  pledgeId  String
  fromAddress String
  toAddress   String
  amount      Decimal  @db.Decimal(10, 2)
  txHash      String   @unique
  blockNumber Int?
  status      String   @default("pending") // pending, confirmed, failed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  pledge Pledge @relation(fields: [pledgeId], references: [id], onDelete: Cascade)

  @@map("escrow_transactions")
} 
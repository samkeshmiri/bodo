# Bodo - Fitness Fundraising Platform

## Project Overview
Bodo is a full-stack fitness fundraising platform that connects fitness activities (via Strava) to fundraising campaigns with an escrow system. Users can create fundraising campaigns, make pledges, and earn money based on their fitness activities.

## Tech Stack
- **Frontend**: Next.js 14 with App Router, TypeScript, Tailwind CSS
- **Backend**: Next.js API routes, Prisma ORM, PostgreSQL
- **Authentication**: Privy (Web3 authentication)
- **Fitness Integration**: Strava API
- **Blockchain**: Ethers.js for escrow simulation
- **Validation**: Zod schemas
- **Styling**: Tailwind CSS with PostCSS and Autoprefixer for modern CSS processing

## Project Structure
```
bodo/
├── app/                    # Next.js App Router
│   ├── api/               # API routes
│   │   ├── fundraise/     # Fundraising endpoints
│   │   ├── pledge/        # Pledge management
│   │   ├── user/          # User management
│   │   └── webhook/       # Strava webhooks
│   ├── fundraises/        # Fundraising pages
│   ├── globals.css        # Global styles
│   ├── layout.tsx         # Root layout
│   └── page.tsx           # Homepage
├── lib/                   # Utility libraries
│   ├── escrow.ts          # Blockchain escrow logic
│   ├── prisma.ts          # Database client
│   ├── privy.ts           # Authentication utilities
│   ├── strava.ts          # Strava API integration
│   └── validations.ts     # Zod validation schemas
├── prisma/                # Database schema and migrations
│   ├── schema.prisma      # Database schema
│   └── seed.ts            # Database seeding
├── postcss.config.js      # PostCSS configuration with Tailwind and Autoprefixer
└── package.json           # Dependencies and scripts
```

## Database Schema
The project uses PostgreSQL with Prisma ORM. Key models:
- **User**: Core user data with Privy and Strava integration
- **Wallet**: User wallet addresses (Privy or manual)
- **Fundraise**: Fundraising campaigns with goals and deadlines
- **Pledge**: Staking commitments with per-km rates
- **Activity**: Fitness activities from Strava
- **Payout**: Payments triggered by activities
- **EscrowTransaction**: Blockchain escrow transactions

## Key Patterns & Conventions

### 1. API Route Structure
- All API routes use Next.js App Router (`app/api/`)
- Use `NextRequest` and `NextResponse` for type safety
- Implement proper error handling with try-catch blocks
- Return consistent JSON responses with status codes

### 2. Validation
- Use Zod schemas from `lib/validations.ts`
- Validate all incoming requests with `validateRequest()`
- Define schemas for all data models and API endpoints

### 3. Database Operations
- Use Prisma client from `lib/prisma.ts`
- Include related data with `include` option
- Use transactions for complex operations
- Handle database errors gracefully

### 4. Authentication
- Privy for Web3 authentication
- Store user data in PostgreSQL
- Sync wallet addresses automatically
- Handle token verification in API routes

### 5. Strava Integration
- OAuth flow for connecting Strava accounts
- Webhook handling for activity updates
- Token refresh logic
- Activity syncing and processing

### 6. Escrow System
- Simulated blockchain escrow using Ethers.js
- Monitor transaction status
- Process payouts based on activities
- Track escrow balances

### 7. UI/UX Patterns
- Use Tailwind CSS with PostCSS and Autoprefixer for modern CSS processing
- Implement responsive design with mobile-first approach
- Use gradient backgrounds and modern components
- Follow accessibility best practices
- Leverage shadcn/ui components for consistent design system

## Coding Guidelines

### TypeScript
- Use strict TypeScript configuration
- Define interfaces for all data structures
- Use proper type annotations for API responses
- Leverage Zod for runtime type validation

### Error Handling
- Use try-catch blocks in all async operations
- Log errors with meaningful messages
- Return appropriate HTTP status codes
- Provide user-friendly error messages

### Security
- Validate all user inputs
- Use environment variables for secrets
- Implement proper authentication checks
- Sanitize data before database operations

### Performance
- Use database indexes for frequently queried fields
- Implement pagination for large datasets
- Cache frequently accessed data
- Optimize database queries with proper includes

### Testing
- Write unit tests for utility functions
- Test API endpoints with proper fixtures
- Mock external services (Strava, blockchain)
- Test error scenarios

## Common Tasks

### Adding New API Endpoints
1. Create route file in `app/api/`
2. Define Zod validation schema in `lib/validations.ts`
3. Implement GET/POST/PUT/DELETE handlers
4. Add proper error handling
5. Test with appropriate data

### Database Schema Changes
1. Update `prisma/schema.prisma`
2. Run `npm run db:generate` to update client
3. Run `npm run db:push` to apply changes
4. Update related validation schemas
5. Test with seed data

### Adding New Pages
1. Create page component in `app/`
2. Use Tailwind CSS for styling
3. Implement responsive design
4. Add proper navigation links
5. Test on different screen sizes

### Strava Integration
1. Use functions from `lib/strava.ts`
2. Handle OAuth flow properly
3. Implement webhook verification
4. Sync activities automatically
5. Process payouts based on activities

### Escrow Operations
1. Use `EscrowService` from `lib/escrow.ts`
2. Monitor transaction status
3. Process payouts safely
4. Handle insufficient balance scenarios
5. Log all blockchain operations

## Environment Variables
Required environment variables:
- `DATABASE_URL`: PostgreSQL connection string
- `PRIVY_APP_ID` & `PRIVY_APP_SECRET`: Privy authentication
- `STRAVA_CLIENT_ID` & `STRAVA_CLIENT_SECRET`: Strava API
- `NEXT_PUBLIC_RPC_URL`: Blockchain RPC endpoint
- `ESCROW_WALLET_PRIVATE_KEY`: Escrow wallet private key
- `ESCROW_WALLET_ADDRESS`: Escrow wallet address

## Development Commands
- `npm run dev`: Start development server
- `npm run build`: Build for production
- `npm run db:generate`: Generate Prisma client
- `npm run db:push`: Push schema changes
- `npm run db:seed`: Seed database with test data
- `npm run db:studio`: Open Prisma Studio

## Notes
- This is a hackathon project with escrow simulation
- Blockchain operations are simulated for demonstration
- Focus on clean, maintainable code
- Prioritize user experience and security
- Document complex business logic

## File Maintenance
- Keep this `.cursorrules` file updated when project structure, patterns, or conventions change
- Update the tech stack section when new dependencies are added
- Modify database schema section when Prisma models change
- Update environment variables section when new env vars are required
- Revise coding guidelines when new patterns emerge
- Add new common tasks as they become frequent development activities 